import pandas as pd
from numpy import int64
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('preprocessed_air_quality.csv')

# Preprocessing
data = data.dropna()  # Remove missing values

# Split features and target
X = data.loc[:, ['Start_Date']]
y = data.loc[:, 'Data Value']

# Converting the 'Start_Date' column to a numerical format
X['Start_Date'] = pd.to_datetime(X['Start_Date']).astype(int64) / 10**9

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create the Decision Tree Regressor
regressor = DecisionTreeRegressor()

# Train the model
regressor.fit(X_train, y_train)

# Make predictions
y_pred = regressor.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Create a table of results
results = pd.DataFrame({'Start_Date': X_test['Start_Date'], 'Data Value': y_test, 'Predicted Value': y_pred})

# Print the table
print(results)

# Scatter plot of actual vs predicted values
plt.scatter(X_test['Start_Date'], y_test, color='blue', label='Actual')
plt.scatter(X_test['Start_Date'], y_pred, color='red', label='Predicted')
plt.xlabel('Start_Date')
plt.ylabel('Data Value')
plt.title('Actual vs Predicted Values')
plt.legend()
plt.show()

# Residual plot
residuals = y_test - y_pred
plt.scatter(X_test['Start_Date'], residuals)
plt.axhline(y=0, color='red', linestyle='--')
plt.xlabel('Start_Date')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.show()
