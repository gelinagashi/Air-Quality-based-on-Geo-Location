create testing traning in python using linear regression in this code 
import pandas as pd
load the dataset
data = pd.read_csv("C:/Users/Dell/Desktop/Air_Quality.csv")

remove duplicates
data = data.drop_duplicates()

Drop unnecessary columns
data = data.drop(columns=["Unique ID", "Indicator ID", "Measure", "Measure Info", "Message"])
data["Start_Date"] = pd.to_datetime(data["Start_Date"], format="%m/%d/%Y")

Remove rows with missing values
data = data.dropna()

Save the preprocessed dataset to a new CSV file
data.to_csv('preprocessed_air_quality.csv', index=False)
----------------------------------------------------------

import pandas as pd
import numpy as np
from numpy import int64
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.pipeline import make_pipeline
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import GridSearchCV

# Load the preprocessed dataset
data = pd.read_csv("preprocessed_air_quality.csv")

# Selecting the necessary columns
X = data.loc[:, ['Start_Date']]
y = data.loc[:, 'Data Value']

# Converting the 'Start_Date' column to a numerical format
X['Start_Date'] = pd.to_datetime(X['Start_Date']).astype(int64) / 10**9

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Creating a pipeline with polynomial features and standardization
model = make_pipeline(PolynomialFeatures(degree=2), StandardScaler(), LinearRegression())

# Hyperparameter tuning using GridSearchCV
param_grid = {'polynomialfeatures__degree': [1, 2, 3], 'linearregression__fit_intercept': [True, False]}
grid_search = GridSearchCV(model, param_grid=param_grid, cv=5)
grid_search.fit(X_train, y_train)

# Best model from the grid search
best_model = grid_search.best_estimator_

# Predicting the values for the test data
y_pred = best_model.predict(X_test)

# Printing the coefficient and intercept of the linear regression model
print("Coefficient:", best_model.named_steps['linearregression'].coef_)
print("Intercept:", best_model.named_steps['linearregression'].intercept_)

# Evaluating the model performance
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Create a dataframe to store the results
results = pd.DataFrame({'Mean Squared Error': [mse], 'R2 Score': [r2]})

# Print the results table
print(results)


